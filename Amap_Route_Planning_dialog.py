# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AmapRoutePlanningDialog
                                 A QGIS plugin
 调用api计算三种出行方式下的最短路径及用时
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-09
        git sha              : $Format:%H$
        copyright            : (C) 2025 by MaritimeDay
        email                : Connor_rk800A@163.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Amap_Route_Planning_dialog_base.ui'))


class RoutePlanningDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(RoutePlanningDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.btn_refresh.clicked.connect(self.refresh_layers)
        self.comboBox_origin_layer.currentIndexChanged.connect(self.populate_origin_fields)
        self.comboBox_dest_layer.currentIndexChanged.connect(self.populate_dest_fields)
        self.comboBox_mode.currentIndexChanged.connect(self.toggle_city_input)
        self.refresh_layers()
        self.toggle_city_input()

    def toggle_city_input(self):
        mode = self.get_mode()
        self.lineEdit_city.setEnabled(mode == 'transit')

    def refresh_layers(self):
        from qgis.core import QgsProject
        self.comboBox_origin_layer.clear()
        self.comboBox_dest_layer.clear()
        layers = [lyr for lyr in QgsProject.instance().mapLayers().values() if lyr.type() == 0 and lyr.geometryType() in (0, 4)]
        for lyr in layers:
            self.comboBox_origin_layer.addItem(lyr.name())
            self.comboBox_dest_layer.addItem(lyr.name())
        self.populate_origin_fields()
        self.populate_dest_fields()

    def populate_origin_fields(self):
        from qgis.core import QgsProject
        self.comboBox_origin_field.clear()
        layer_name = self.comboBox_origin_layer.currentText()
        lyr = None
        for l in QgsProject.instance().mapLayers().values():
            if l.name() == layer_name:
                lyr = l
                break
        if lyr:
            for f in lyr.fields():
                self.comboBox_origin_field.addItem(f.name())

    def populate_dest_fields(self):
        from qgis.core import QgsProject
        self.comboBox_dest_field.clear()
        layer_name = self.comboBox_dest_layer.currentText()
        lyr = None
        for l in QgsProject.instance().mapLayers().values():
            if l.name() == layer_name:
                lyr = l
                break
        if lyr:
            for f in lyr.fields():
                self.comboBox_dest_field.addItem(f.name())

    def get_origin_layer(self):
        return self.comboBox_origin_layer.currentText()

    def get_dest_layer(self):
        return self.comboBox_dest_layer.currentText()

    def get_origin_field(self):
        return self.comboBox_origin_field.currentText()

    def get_dest_field(self):
        return self.comboBox_dest_field.currentText()

    def get_mode(self):
        text = self.comboBox_mode.currentText()
        if text == '驾车':
            return 'driving'
        elif text == '步行':
            return 'walking'
        elif text == '骑行':
            return 'bicycling'
        elif text == '公交':
            return 'transit'
        else:
            return 'driving'

    def get_export_layer(self):
        return self.checkBox_export_layer.isChecked()

    def get_output_path(self):
        return self.lineEdit_output_path.text().strip()

    def get_key(self):
        return self.lineEdit_key.text().strip()

    def get_city(self):
        return self.lineEdit_city.text().strip()

    def append_log(self, msg):
        self.textEdit_log.append(msg)

    def set_progress(self, value):
        self.progressBar_status.setValue(value)

    def reset_progress(self):
        self.progressBar_status.setValue(0)

    def set_run_enabled(self, enabled):
        self.btn_run.setEnabled(enabled)
        self.btn_stop.setEnabled(not enabled)
